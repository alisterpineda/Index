/**
 * Generated by orval v7.14.0 🍺
 * Do not edit manually.
 * JasperDocs.WebApi | v1
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import type {
  CreateDocument,
  CreateDocumentVersion
} from '../api.schemas';

import { customAxiosInstance } from '../../axios-instance';




export const postApiDocuments = (
    createDocument: CreateDocument,
 signal?: AbortSignal
) => {
      
      
      return customAxiosInstance<void>(
      {url: `/api/Documents`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createDocument, signal
    },
      );
    }
  


export const getPostApiDocumentsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiDocuments>>, TError,{data: CreateDocument}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiDocuments>>, TError,{data: CreateDocument}, TContext> => {

const mutationKey = ['postApiDocuments'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiDocuments>>, {data: CreateDocument}> = (props) => {
          const {data} = props ?? {};

          return  postApiDocuments(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiDocumentsMutationResult = NonNullable<Awaited<ReturnType<typeof postApiDocuments>>>
    export type PostApiDocumentsMutationBody = CreateDocument
    export type PostApiDocumentsMutationError = unknown

    export const usePostApiDocuments = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiDocuments>>, TError,{data: CreateDocument}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiDocuments>>,
        TError,
        {data: CreateDocument},
        TContext
      > => {

      const mutationOptions = getPostApiDocumentsMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    export const postApiDocumentsVersions = (
    createDocumentVersion: CreateDocumentVersion,
 signal?: AbortSignal
) => {
      
      
      return customAxiosInstance<void>(
      {url: `/api/Documents/versions`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createDocumentVersion, signal
    },
      );
    }
  


export const getPostApiDocumentsVersionsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiDocumentsVersions>>, TError,{data: CreateDocumentVersion}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiDocumentsVersions>>, TError,{data: CreateDocumentVersion}, TContext> => {

const mutationKey = ['postApiDocumentsVersions'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiDocumentsVersions>>, {data: CreateDocumentVersion}> = (props) => {
          const {data} = props ?? {};

          return  postApiDocumentsVersions(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiDocumentsVersionsMutationResult = NonNullable<Awaited<ReturnType<typeof postApiDocumentsVersions>>>
    export type PostApiDocumentsVersionsMutationBody = CreateDocumentVersion
    export type PostApiDocumentsVersionsMutationError = unknown

    export const usePostApiDocumentsVersions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiDocumentsVersions>>, TError,{data: CreateDocumentVersion}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiDocumentsVersions>>,
        TError,
        {data: CreateDocumentVersion},
        TContext
      > => {

      const mutationOptions = getPostApiDocumentsVersionsMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    