/**
 * Generated by orval v7.14.0 🍺
 * Do not edit manually.
 * JasperDocs.WebApi | v1
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import type {
  CreateDocument
} from '../api.schemas';

import { customAxiosInstance } from '../../axios-instance';




export const postDocuments = (
    createDocument: CreateDocument,
 signal?: AbortSignal
) => {
      
      
      return customAxiosInstance<void>(
      {url: `/Documents`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createDocument, signal
    },
      );
    }
  


export const getPostDocumentsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDocuments>>, TError,{data: CreateDocument}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postDocuments>>, TError,{data: CreateDocument}, TContext> => {

const mutationKey = ['postDocuments'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDocuments>>, {data: CreateDocument}> = (props) => {
          const {data} = props ?? {};

          return  postDocuments(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDocumentsMutationResult = NonNullable<Awaited<ReturnType<typeof postDocuments>>>
    export type PostDocumentsMutationBody = CreateDocument
    export type PostDocumentsMutationError = unknown

    export const usePostDocuments = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDocuments>>, TError,{data: CreateDocument}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postDocuments>>,
        TError,
        {data: CreateDocument},
        TContext
      > => {

      const mutationOptions = getPostDocumentsMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    